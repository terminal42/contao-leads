{"version":3,"file":"leads.e4242972.js","mappings":"yBACA,IAAIA,EAAsB,CCD1BA,EAAwB,6B,QCAxB,MAAMC,EAA8BC,GAAQA,EAAIC,iBAAiB,qBAkB3DC,EAAwBC,IAC1BA,EAASC,SAAQ,CAACC,EAAIC,KAClB,MAAMC,EAAqBD,EAAQ,EAEnCD,EAAGG,IAAI,OAAQ,gCACMD,uCArBME,KAC/B,MAAMC,EAAQC,SAASF,EAAI,GAAI,IACzBG,EAAYH,EAAa,GAARC,EACvB,IAAIG,EAAS,GAUb,OARIH,EAAQ,IACRG,EAASC,OAAOC,aAAaL,EAAQ,KAGrCE,EAAY,IACZC,GAAUC,OAAOC,aAAaH,EAAY,KAGvCC,CAAM,EASYG,CAA0BT,WAA4B,GAC7E,ECnBNU,SAASC,iBAAiB,oBAAoB,MDsB/B,WACX,MAAMC,EAAOF,SAAShB,iBAAiB,2BAGjCmB,EAAoB,WACtB,MAAMC,EAAW,CAAC,SAAU,MAAO,IAAK,KAAM,IAC9C,IAAK,IAAIZ,EAAI,EAAGA,EAAIY,EAASC,OAAQb,GAAK,EACtC,GAAI,GAAGY,EAASZ,uBAAwBc,OACpC,OAAOA,OAAO,GAAGF,EAASZ,sBAGlC,OAAO,CACX,CAR0B,GAU1BU,EAAKf,SAASJ,IACV,IAAIG,EAAWJ,EAA2BC,GAE1C,GAAIoB,EAAkB,CAClBlB,EAAqBC,GAGrB,MAAMqB,EAAiB,CAAEC,WAAW,EAAMC,SAAS,GAC7CC,EAAW,IAAIP,GAAkBQ,IACnCA,EAAUxB,SAASyB,KACXA,EAASC,WAAWR,OAAS,GAAKO,EAASE,aAAaT,OAAS,KACjEK,EAASK,aAET7B,EAAWJ,EAA2BC,GACtCE,EAAqBC,GAErBwB,EAASM,QAAQjC,EAAKwB,GAC1B,GACF,IAGNG,EAASM,QAAQjC,EAAKwB,EAC1B,MACIrB,EAASC,SAASC,IACdA,EAAGG,IAAI,OAAQ,GAAG,GAE1B,GAER,CC/DI0B,EAAqB,G","sources":["webpack://@terminal42/contao-leads/webpack/bootstrap","webpack://@terminal42/contao-leads/webpack/runtime/publicPath","webpack://@terminal42/contao-leads/./assets/scripts/column-display-helper.js","webpack://@terminal42/contao-leads/./assets/leads.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.p = \"/bundles/terminal42leads/\";","const fetchColumnDisplayElements = (mcw) => mcw.querySelectorAll('td.column_display');\n\nconst convertIndexToExcelColumn = (i) => {\n    const alpha = parseInt(i / 27, 10);\n    const remainder = i - (alpha * 26);\n    let column = '';\n\n    if (alpha > 0) {\n        column = String.fromCharCode(alpha + 64);\n    }\n\n    if (remainder > 0) {\n        column += String.fromCharCode(remainder + 64);\n    }\n\n    return column;\n};\n\nconst updateColumnDisplays = (elements) => {\n    elements.forEach((el, index) => {\n        const humanReadableIndex = index + 1;\n\n        el.set('html', `\n        <div class=\"index\">${humanReadableIndex}</div>\n        <div class=\"excel\">${convertIndexToExcelColumn(humanReadableIndex)}</div>`);\n    });\n};\n\nexport default function () {\n    const mcws = document.querySelectorAll('table.multicolumnwizard');\n\n    // Cannot use regular click events because of MCW\n    const MutationObserver = (function () {\n        const prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\n        for (let i = 0; i < prefixes.length; i += 1) {\n            if (`${prefixes[i]}MutationObserver` in window) {\n                return window[`${prefixes[i]}MutationObserver`];\n            }\n        }\n        return false;\n    }());\n\n    mcws.forEach((mcw) => {\n        let elements = fetchColumnDisplayElements(mcw);\n\n        if (MutationObserver) {\n            updateColumnDisplays(elements);\n\n            // Register observer\n            const observerConfig = { childList: true, subtree: true };\n            const observer = new MutationObserver((mutations) => {\n                mutations.forEach((mutation) => {\n                    if (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0) {\n                        observer.disconnect();\n\n                        elements = fetchColumnDisplayElements(mcw);\n                        updateColumnDisplays(elements);\n\n                        observer.observe(mcw, observerConfig);\n                    }\n                });\n            });\n\n            observer.observe(mcw, observerConfig);\n        } else {\n            elements.forEach((el) => {\n                el.set('html', '');\n            });\n        }\n    });\n}\n","import './styles/leads.scss';\nimport './images/field.png';\nimport './images/export.png';\n\nimport ColumnDisplayHelper from './scripts/column-display-helper';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    ColumnDisplayHelper();\n});\n"],"names":["__webpack_require__","fetchColumnDisplayElements","mcw","querySelectorAll","updateColumnDisplays","elements","forEach","el","index","humanReadableIndex","set","i","alpha","parseInt","remainder","column","String","fromCharCode","convertIndexToExcelColumn","document","addEventListener","mcws","MutationObserver","prefixes","length","window","observerConfig","childList","subtree","observer","mutations","mutation","addedNodes","removedNodes","disconnect","observe","ColumnDisplayHelper"],"sourceRoot":""}